// Code generated by goctl. DO NOT EDIT.
// Source: auth.proto

package authClient

import (
	"context"

	"zero-app/rpc/auth/auth"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	SignInReq = auth.SignInReq
	SignInRes = auth.SignInRes
	SignUpReq = auth.SignUpReq
	SignUpRes = auth.SignUpRes

	Auth interface {
		SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInRes, error)
		SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpRes, error)
	}

	defaultAuth struct {
		cli zrpc.Client
	}
)

func NewAuth(cli zrpc.Client) Auth {
	return &defaultAuth{
		cli: cli,
	}
}

func (m *defaultAuth) SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInRes, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.SignIn(ctx, in, opts...)
}

func (m *defaultAuth) SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpRes, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.SignUp(ctx, in, opts...)
}
