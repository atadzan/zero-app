// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	testUsersFieldNames          = builder.RawFieldNames(&TestUsers{}, true)
	testUsersRows                = strings.Join(testUsersFieldNames, ",")
	testUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(testUsersFieldNames, "id"), ",")
	testUsersRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(testUsersFieldNames, "id"))
)

type (
	testUsersModel interface {
		Insert(ctx context.Context, data *TestUsers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TestUsers, error)
		Update(ctx context.Context, data *TestUsers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTestUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TestUsers struct {
		Id        int64  `db:"id"`
		Firstname string `db:"firstname"`
		Lastname  string `db:"lastname"`
		Username  string `db:"username"`
		Password  string `db:"password"`
		Age       int64  `db:"age"`
	}
)

func newTestUsersModel(conn sqlx.SqlConn) *defaultTestUsersModel {
	return &defaultTestUsersModel{
		conn:  conn,
		table: `"public"."test_users"`,
	}
}

func (m *defaultTestUsersModel) withSession(session sqlx.Session) *defaultTestUsersModel {
	return &defaultTestUsersModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."test_users"`,
	}
}

func (m *defaultTestUsersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTestUsersModel) FindOne(ctx context.Context, id int64) (*TestUsers, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", testUsersRows, m.table)
	var resp TestUsers
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTestUsersModel) Insert(ctx context.Context, data *TestUsers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, testUsersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Firstname, data.Lastname, data.Username, data.Password, data.Age)
	return ret, err
}

func (m *defaultTestUsersModel) Update(ctx context.Context, data *TestUsers) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, testUsersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Firstname, data.Lastname, data.Username, data.Password, data.Age)
	return err
}

func (m *defaultTestUsersModel) tableName() string {
	return m.table
}
